# This workflow will do a clean install of node dependencies, run services with docker-compose and run e2e tests

name: E2E CI

on:
  push:
    branches: [master, "e2e/**"]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Update npm
        run: npm i -g npm@7.3.0
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - name: Install packages dependencies
        run: npm run bootstrap -- --loglevel verbose
      - name: Build Data Service Generator
        run: npm run build -- --scope @amplication/data-service-generator --include-dependencies
      - name: "Data Service Generator: generate app"
        run: npm run generate-test-data-service
        working-directory: packages/amplication-data-service-generator
      - name: "Data Service Generator: install dependencies of the generated app and run unit tests"
        run: npm ci && npm run prisma:generate && npm test
        working-directory: packages/amplication-data-service-generator/generated/server
      - name: "Data Service Generator: E2E test"
        run: npm run test:e2e -- --scope @amplication/data-service-generator
      - name: "Run a full environment"
        run: docker-compose up -d
      - name: "Run e2e tests"
        run: |
          set -e;
          function before_exit {
            docker-compose logs;
          }
          trap before_exit EXIT;
          npm test -- --scope @amplication/e2e-tester;
