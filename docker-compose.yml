version: "3"
services:
  postgres:
    image: postgres:12
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD}
    volumes:
      - postgres:/var/lib/postgresql/data
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NPM_LOG_LEVEL: notice
    image: amplication/amplication
    ports:
      - "3000:3000"
    environment:
      POSTGRESQL_URL: postgres://${POSTGRESQL_USER}:${POSTGRESQL_PASSWORD}@postgres:5432
      JWT_SECRET: "${JWT_SECRET}"
      SERVICE_JWT_SECRET: "${SERVICE_JWT_SECRET}"
      BCRYPT_SALT_OR_ROUNDS: "${BCRYPT_SALT_OR_ROUNDS}"
      NODE_ENV: production
      CORS_ENABLE: 1
      PORT: 3000
      HOST: http://localhost:3000
      DEFAULT_DISK: "${DEFAULT_DISK}"
      LOCAL_DISK_ROOT: "${LOCAL_DISK_ROOT}"
      CONTAINER_BUILDER_DEFAULT: "${CONTAINER_BUILDER_DEFAULT}"
      GENERATED_APP_BASE_IMAGE: "${GENERATED_APP_BASE_IMAGE}"
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NPM_LOG_LEVEL: notice
    image: amplication/amplication
    environment:
      POSTGRESQL_URL: postgres://${POSTGRESQL_USER}:${POSTGRESQL_PASSWORD}@postgres:5432
    command: npm run migrate:up
  scheduler:
    image: amplication/scheduler
    command: --request.url http://app:3000/system/update-statuses --request.method POST --schedule '* * * * *'
volumes:
  postgres: ~
